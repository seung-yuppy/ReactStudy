// Hooks
// 16버전에서 출시된 기능
// 함수형 컴포넌트가 상태관리가 너무 어려움
// 함수형 컴포넌트에서도 상태관리를 할 수 있도록 다양한 메서드들을 추가
// 그 중 하나가 useState
// useState : 상태관리 Hook(기본 Hook)
//  --> 함수 파라미터 기본값 설정
//  --> 그 외 컴포넌트의 전반적인 상태를 관리하는 Hook
// 사용방식 const [현재상태값, 해당값을 업데이트하는 함수명] = useState(초기상태값)

// Hook은 일반함수와 거의 비슷하긴함
// 일반함수 그냥 쓰는게 나을것 같은데 굳이 써야함?
// Hook의 장점
// 1. 코드가 간결해짐
//      --> 함수형 컴포넌트가 클래스형 컴포넌트를 좀 더 단순히 쓰기위해 나온개념
//          문제는 기능을 다 만들수가 없어서 Hook이 등장
// 2. 재사용성
//      --> 훅은 커스텀이 가능
// 3. 컴포넌트 분리
// 4. 라이프 사이클 메서드 문제 해결

// 라이프사이클(컴포넌트의 생명주기)
// CBD 개발방식에서는 라이프사이클이 존재
// 컴포넌트가 생성되고 업데이트, 소멸될 때까지의 상태를 설명(설정)하는 메서드

// 마운트, 업데이트, 언마운트

// Hooks의 등장으로 클래스형 컴포넌트를 굳이 강요받지 않음
// Hooks은 함수형 컴포넌트 내에서만 사용가능하냐?
//  --> Hooks의 규칙 : 최상위 레벨에서만 호출할 것
//  (리액트의 함수형 컴포넌트의 구조 자체가 Hooks의 호출순서에 의존하여 해당 Hooks가 관리하는 상태와의 연관성 유지 때문이다)

// useEffect : 컴포넌트 랜더링 시 특정 작업을 수행하도록 설정하는 Hook
// 마운트, 업데이트, 언마운트시 우리가 원하는대로 수행하기위해 사용하는 Hook, state와 다르게 필수까진 아님

// useContext : useState가 컴포넌트 단위의 지역변수 느낌 --> 전역변수 느낌
// 상태 자체를 전역으로 관리하는 방법(컴포넌트 간 값 공유)
// 여러 단계의 중첩된 컴포넌트를 거치지 않고 데이터를 효율적으로 공유
// createContext(): 공유할 데이터를 정의하는 컨텍스트 생성.
// Provider: 생성된 컨텍스트에 값을 제공하는 역할. value로 값을 지정.
// useContext(): 제공된 값을 가져오는 훅(Hook).

// useRef : 참조 훅
//  --> .current 프로퍼티로 전달된 인자로 초기화된 변경가능한 ref 객체를 반환하며 반환된 객체는 컴포넌트의 라이프사이클을 통해 관리
// 랜더링에 필요하지 않을 값을 참조할 수 있는 훅
// --> 컴포넌트가 특정정보를 기억하도록 하고싶지만 만약 새 랜더링을 막고싶다면 ref를 사용함
// react 포스트잇 => 기억하고 싶은 내용을 저장할 때 쓰는 state와는 다른 변수 선언
// useEffect와 연계해서 사용하기도 좋음
// 가상DOM을 활용하는 것이 아닌 DOM을 직접 조작

// useReducer : 컴포넌트에 reducer를 추가하는 React Hook
// --> state와 비슷하지만 좀 더 복잡한 상태 관리시 사용하는 Hook
// --> state의 대체함수
// --> state의 경우는 컴포넌트 자체를 전체 통제하는 특징
// --> reducer는 업데이트의 로직 자체가 분리되어 있어서 컴포넌트의 영향에서 벗어날 수 있음
// --> 컴포넌트 외부에 state를 업데이트 할 수있는 코드를 적는다
// reducer vs state
// state : 관리해야할 상태가 1개일 때, 값이 단순할 때
// reducer : 관리할 state가 1개 이상일 때, 값이 복잡하고 프로젝트의 규모가 클 때, 혹은 값이 유동적일 때 

// useReducer에서 쓸 수 있는 구성요소(함수)
// 1. useReducer : state 갱신역할
//      - state : 컴포넌트에서 사용할 상태값
//      - dispatch : state를 업데이트할 함수
//      - reducer : 컴포넌트 외부에서 state를 업데이트 하는 로직을 담당하는 함수
//      - initialState : 초기 State
//      - init : 초기 함수
// 2. action : 업데이트를 위한 정보를 가지고 있는 dispatch의 인자값(파라미터값)
// 3. dispatch : reducer 함수 실행기
// 4. reducer : 컴포넌트 외부에서 상태를 업데이트 할 때 사용하는 함수

// useMemo
// useCallback
// useLayoutEffect
// Hook 커스텀
