TDD : Test Driven Development

1. 처음 들어보고 써보면 드는 느낌 : 왜쓰지?

tdd는 테스트 주도 개발이라는 이론
 --> 반복적인 테스트를 이용한 소프트웨어 방법론
 --> 작은 단위의 테스트 케이스를 작성하고 이를 통과하는 코드를 추가하는 단계를 반복하면서 구현하는 방식
 --> XP 기반의 단순 설계를 중요시 하는 이론 (XP : 미래에 대한 예측은 지양하면서 지속적으로 코드를 완성해나가는 방법론)
 --> 추가 요구사항에 대해 실시간 반영이 가능
 --> TDD의 문제는 개발자마다 생각과 의견이 다 다름
 --> 가장 중요한 점은 회사마다 일하는 방식이 다르고 업무환경 편차는 존재하기 마련

TDD 절차
 --> RED, GREEN, REFACTOR
 RED : 일부러 실패하는 테스트코드를 작성
 GREEN : 테스트 코드를 성공시키기 위한 실제 코드 작성
 REFACTOR(BLUE) : 중복코드 제거(클린 코드 작성) / 리팩토링

실패하는 테스트코드를 작성할 때까지 실제 코드를 작성하지 않는 것과 실패하는 테스트를 통과할 정도의 최소한의 실제 코드를 작성해야하는 것(TDD에서 중요하게 생각하는 부분)
--> 사용자가 무엇을 할지 모르기 때문에 사용자가 실수로 잘못할 부분까지 예측해보는 것이다

TDD의 흐름

단위테스트 시나리오 작성 --> 실패 --> 다시 작업 --> 성공할 때까지... 설령 다 해도 오픈날까지 계속


1. 단위 테스트 - 하나의 모듈(컴포넌트)을 기준으로 독립적으로 진행되는 최소단위 테스트
2. 통합 테스트 - 전체적인 흐름 자체를 테스트 해보는 것 

일반 개발 vs TDD

case 일반 개발
1. 요구사항 분석
2. 요구사항을 분석한 내용을 기반으로 설계
3. 설계된 내용을 기반으로 개발(구현)
4. 개발된 내용들을 테스트
5. 오픈일에 맞춰 배포

일반 개발 방식의 특징
 - 초기에 완벽한 설계를 하는 것은 너무나 어려움 
 --> 잠재적 에러나 추가 요구사항으로 인한 재설계를 진행
 --> 재설계 진행시 개발자는 코드를 추가 or 수정하는 경우가 발생(불필요한 코드를 추가할 수도 있음)
 --> 불필요한 코드가 추가되면 -> 재사용성 하락 -> 관리가 어려워짐 -> 유지보수가 빡세짐
 --> 사소한 코드 수정에도 어디가 잘못된지 알기 어렵기 때문에 전체적인 테스트가 진행되야 함

TDD 개발 방식의 특징
 - 테스트 코드들을 사전에 미리 작성을 해둠 --> 그것을 기반으로 실제 개발 코드를 작성
 - 목적과 범위가 미리 설정이 되어야함
 - 테스트 코드 작성시 발생된 예외적인 상황들은 테스트 케이스에 추가하여 설계를 개선
 - 테스트에 통과된 코드들만 실제로 사용하다보니 에러가 줄어든다라는 이론상의 장점이 있음

TDD를 적용한 사례
 - 생년월일을 입력받으면 현재 나이를 출력하는 프로그램을 작성해주세요.
 - 1989 -> 35
 - 2000 -> 25, 24
 - 1997 -> 28, 27

1. 처음에는 간단한 것으로 목표를 정해야함.(일단 만들고 보자)
    -> 2000이라고 입력되면 24 or 25라고 나오도록 처리해보자.
       (오늘날짜의 년도를 추출하여 년도 - 입력값의 결과를 리턴하자.)
2. 만들기전에 만든 후 무엇을 테스트 할지를 설계(실패하는 경우)
    -> 1997을 입력했는데 24가 나오는 테스트 프로그램
3. 테스트를 통과할 프로그램을 만들으면됨(1번을 목표로 작성한 코드)
4. 테스트 프로그램으로 3번에 해당하는 코드를 실행.
5. 통과하면 다음거.(새로운 테스트)
    - 여기서 생일이 지났는지 아닌지를 판단하여 계산하도록 내용을 추가.
6. 모든것이 다 끝날때까지 지속적으로.

디자인(설계) 단계에서 프로그래밍 목적을 정의.(이건 거의 대부분이 그럼)
 -> 무엇을 테스트할지를 미리 정의하는것은 TDD방식에서 일반적으로 진행. 
     (테스트코드를 작성하는도중에 발생하는 예외상황들이 있음. 이러한 예외상황들 또한
      테스트케이스에 추가하고 설계를 개선. -> 설계를 완벽하게 하려는 강박에 빠질 필요는 없음.
      처음부터 완벽하게 하는것은 너무 힘들기때문에 좀더 빨리 구현을 끝내고 테스트를 좀더 많이하는)
 -> 테스트가 통과된 코드만을 코드 개발 단계에서 실제 코드로 작성.
 -> TDD는 이론상으로 테스트와 구현이 반복적으로 진행이되면서 자연스럽게 코드의 버그가 줄어들고
    소스코드는 간결해지는 특징이 있음('이론상')   
 -> 테스트케이스를 작성하면서 설계부분도 개선이 되다보니 재설계 시간도 절감.

TDD의 장점만 정리
1. 디버깅시간의 단축
2. 피드백을 빠르게 받을수 있음.
   -> 인수테스트라는게 있음. but Tdd로 개발했을 경우는 실질적으로 완성된 코드로 테스트를 하기때문에
      프로그래머의 손을 떠나기전에 피드백을 받는것이 가능.(다른개발도 마찬가지)
   -> 다만 TDD는 문제점을 발견하기가 좀더 편하다.
3. 불안정성이 개선되다보니 생산성이 높아짐
   -> 다만 TDD는 지루할수는 있음.(앞선 장점들을 녹여서 생각해보면 불안정성이 개선되다보니
      생산성이 증대되는 효과까지 누릴수 있음.)
4. 재설계 시간의 단축
5. 추가구현이 용이

그렇다면 TDD는 정석적인 테스트 방식?(모든 개발자가 사용하는 방식?)
 -> 당연히 단점도 존재하는 방식
1. 생산성 저하.(?????????)
 -> TDD를 신봉하는 개발자가 절반이라면 절반은 의심.
    (아니 뭐하러 코드를 2개씩짬? -> 그냥 처음짤때 최대한 잘짜고 테스트 그냥 잘 하면되는거아님?)
 -> TDD가 일반적인 방식들보다 시간이 30%정도는 증가.
    생산성 향상이냐 저하냐는 프로젝트의 성격마다 차이가 있다고 보는게 맞음
 -> 최근 MVP 방식의 개발이 유행하고있음.

2. TDD는 익숙하지 않다면 개발패턴자체를 바꿔야함.
 -> TDD에 익숙하지 않은 개발자들이 프로젝트에 투입되어 TDD로 하라하면 당연히 생산성이 떨어짐.
    개발자들이 투입이되면 어떻게든 하긴하지만 본 실력 당연히 안나옴.
3. 의외로 예외상황에 대처가 어려울수 있음.(코드의 유연함이 제로에 가까움)
  -> TDD의 원칙을 깨면서 대처해야하느냐? 그걸하기위해 구조를 바꾸느냐, 실제코드가 그래도 제일중요한데
     우직하게 테스트원칙만 무조건 지켜야 하느냐 라는 현실적인 어려움.

그렇다면 TDD 말고 기본적인 테스트의 종류는 무엇?
1. unit(단위) 테스트
2. Integration(통합) 테스트
3. 기능(동작)테스트 (Functional Test)
   - 소프트웨어의 특정한 기능이나 동작을 테스트하는개념.
   - (ex) 데이터를 폼에 입력 -> 제출
      -> 유효성검사가 올바르게 작동하는지, 적절한 경로로 데이터가 잘 전송되는지 테스트.
      -> 통합테스트 일수도, 단일테스트 일수도 있음.
      -> 주요 목적은 코드의 적합성보다 동작 그 자체를 테스트하는것에 목적이 있음.
      -> 프로그램에 특정한 입력이나 이벤트를 주고 그에 해당하는 출력을 조사하여 
         원하는 결과값이 나왔는지를 테스트.
4. E2E Test
   -> 사용자 입장에서 테스트를 진행하는것.
   -> 클라이언트들과 통합테스트시 진행되는 패턴중 하나.
   -> react 기준으로는 cypress라는 라이브러리를 통해 진행

그렇다면 테스트는 언제 어떤것들을 적용시켜야하지?
unit 테스트와 Functional test 비교.
1.unit테스트의 장단점
 - 실패원인이 가장 잘보임.
 - 시간소요가 짧은편
 - 이론상으로 테스트간의 결합도가 낮아서 편리함.
단점 
 - 상호과정중에 실패를 하더라도 테스트상으로는 통과일 가능성도 존재함.
   (ex : 유효성검사가 잘못되었는데 데이터는 저장될수 있음.)
 - 코드 재구성시 기존에 잘 되던 코드가 다시 안되는 경우도 존재함.

Functional Test의 장단점
1. 기능 자체의 테스트다 보니까 직접적으로 사용자가 사용하는 기능에 접근을 하다보니
   잘만 수행되면 테스트 자체는 굉장히 견고하다 할 수 있음.
2. 리팩토링시에도 동작만 유지되면 테스트 통과의 가능성이 높음.

단점
1. 결합도가 높은 상태 -> 실패시 에러 찾기가 굉장히 어려움.(흐름을 쫒아가면서 찾아야함.)


BDD(행동 주도 개발 / Behavior Driven Development) 
 - TDD가 코드중심이라면 BDD는 사용자 중심
 - 사용자가 행할수 있는 잘못들까지 고려하여 테스트를 진행하고 개발하는 프로세스.
 - 시나리오 중심 개발이라고도 얘기할수 있음. 
 - 시나리오의 기준은 Given When then 구조로 진행
   (given : 시나리오 진행에 필요한 상황 명시
    when : 시나리오를 진행하는데 필요한 조건
    then : 시나리오를 완료할 경우 보장해야하는 결과를 명시)

위의 퀴즈를 기반으로 BDD 방식의 개발 모의
 - 사용자가 + 버튼을 눌렀을때
   (제약조건을 정의하고 기능이 어떻게 돌아가는지를 고민)
   제약조건은 테스트시나리오에 추가
   Given : 현재 숫자가 100 이하인경우
   When : 사용자가 + 버튼을 눌렀을때
   Then : 표현하는 숫자값은 1 증가.
 - 사용자가 - 버튼을 눌렀을때 
   Given : 
   When :
   Then :

js배울때
1. 개념은 이해해도 막상 그걸로 코드짜려면 너무 어려움.
2. 어떻게 짜야할진 알겠는데 그냥 문법을 몰라서 전개가 안되는 경우.
(공통점 : 뭘 해야할지 모르는건 똑같음.)
 - 코드를 짤때에는 내가 뭘해야하는지 아는것부터가 우선순위.
 - 제시했던 방법은 생각나는대로 본인의 생각을 우선 적는것부터 연습.
   (이것부터 시작해야 내가 무엇을 모르는지 정의. -> 하다보면 모르는범위가 줄어들음)
 - 이러한 방식은 BDD를 간편하게 요약해서 응용.