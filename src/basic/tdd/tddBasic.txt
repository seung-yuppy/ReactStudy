TDD : Test Driven Development

1. 처음 들어보고 써보면 드는 느낌 : 왜쓰지?

tdd는 테스트 주도 개발이라는 이론
 --> 반복적인 테스트를 이용한 소프트웨어 방법론
 --> 작은 단위의 테스트 케이스를 작성하고 이를 통과하는 코드를 추가하는 단계를 반복하면서 구현하는 방식
 --> XP 기반의 단순 설계를 중요시 하는 이론 (XP : 미래에 대한 예측은 지양하면서 지속적으로 코드를 완성해나가는 방법론)
 --> 추가 요구사항에 대해 실시간 반영이 가능
 --> TDD의 문제는 개발자마다 생각과 의견이 다 다름
 --> 가장 중요한 점은 회사마다 일하는 방식이 다르고 업무환경 편차는 존재하기 마련

TDD 절차
 --> RED, GREEN, REFACTOR
 RED : 일부러 실패하는 테스트코드를 작성
 GREEN : 테스트 코드를 성공시키기 위한 실제 코드 작성
 REFACTOR(BLUE) : 중복코드 제거(클린 코드 작성) / 리팩토링

실패하는 테스트코드를 작성할 때까지 실제 코드를 작성하지 않는 것과 실패하는 테스트를 통과할 정도의 최소한의 실제 코드를 작성해야하는 것(TDD에서 중요하게 생각하는 부분)
--> 사용자가 무엇을 할지 모르기 때문에 사용자가 실수로 잘못할 부분까지 예측해보는 것이다

TDD의 흐름

단위테스트 시나리오 작성 --> 실패 --> 다시 작업 --> 성공할 때까지... 설령 다 해도 오픈날까지 계속


1. 단위 테스트 - 하나의 모듈(컴포넌트)을 기준으로 독립적으로 진행되는 최소단위 테스트
2. 통합 테스트 - 전체적인 흐름 자체를 테스트 해보는 것 

일반 개발 vs TDD

case 일반 개발
1. 요구사항 분석
2. 요구사항을 분석한 내용을 기반으로 설계
3. 설계된 내용을 기반으로 개발(구현)
4. 개발된 내용들을 테스트
5. 오픈일에 맞춰 배포

일반 개발 방식의 특징
 - 초기에 완벽한 설계를 하는 것은 너무나 어려움 
 --> 잠재적 에러나 추가 요구사항으로 인한 재설계를 진행
 --> 재설계 진행시 개발자는 코드를 추가 or 수정하는 경우가 발생(불필요한 코드를 추가할 수도 있음)
 --> 불필요한 코드가 추가되면 -> 재사용성 하락 -> 관리가 어려워짐 -> 유지보수가 빡세짐
 --> 사소한 코드 수정에도 어디가 잘못된지 알기 어렵기 때문에 전체적인 테스트가 진행되야 함

TDD 개발 방식의 특징
 - 테스트 코드들을 사전에 미리 작성을 해둠 --> 그것을 기반으로 실제 개발 코드를 작성
 - 목적과 범위가 미리 설정이 되어야함
 - 테스트 코드 작성시 발생된 예외적인 상황들은 테스트 케이스에 추가하여 설계를 개선
 - 테스트에 통과된 코드들만 실제로 사용하다보니 에러가 줄어든다라는 이론상의 장점이 있음

TDD 적용한 사례
 - 생년월일을 입력받으면 현재 나이를 출력하는 프로그램을 작성해주세요