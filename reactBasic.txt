React가 뭐임?
 - js기반의 라이브러리 혹은 프레임워크

라이브러리나 프레임워크를 쓰는 이유.
 - 개발 편하게 하려고.
 - react는 좀 웃긴게 일반 js쓰는거보다 훨씬 어려움.
   (그렇다면 react가 꼭 필요한 이유는? - SPA 기반의 개발을 위해서.)
 - spa가 필요한이유 : 사용자에게 부드러운 화면 제공을 위해서.
 - spa는 바닐라js보다 react를 사용하면 더 쉽고 빠르게 만들수 있다.

react vs vue
결론 : 누가더 우월하다는 의미없음.
 (조준모 사견 / 이 둘보다 svelte가 더 좋음)
한국사람 특 : 내가 쓰는게 항상 우월해야함

하지만 우선 둘의 장단점은 비교
vuejs장점
1. 입문이 굉장히 쉬운편 - 기능은 강력함/.
2. 재사용성의 극대화. 유지보수성도 나쁘지 않음
3. 데이터가 변경되면 재빠르게 반영.

단점
1. 테스트가 너무 어려움.
2. 커뮤니티가 너무 부족함(vue 최고의 약점)
   - LLM들이 있어서 어느정도는 커버됐음.

react 장점
1. vue의 2,3번 장점은 동일
2. 안정성이 많은 패치로 인하여 보장되는편.
3. 제공되는 자료가 굉장히 많음.
4. vue대비 성능최적화가 우수한편.

단점
1. js를 기본적으로 매우 잘해야함.
2. ajax못씀
3. 규모가 커지면 속도 느려짐.

react와 vue의 공통점
1. 가상DOM활용(react가 가상DOM을 버린다는 루머가 존재.)
2. 컴포넌트기반 개발.
3. 코어 라이브러리에만 집중하고 있음.

차이점
1. 데이터 바인딩 방식이 다름
(react는 단방향, vue는 양방향)
2. react는 JSX라는 형태로 코드를 작성.
    -> 이거때문에 사실 react가 짜증....(js만으로 html/css까지 다 짜라고 과제내면 짜증나죠?)
3. vue의 가상DOM 구현 자체가 react보다 빠름.
4. react는 jsx가 짜증나지만 jsx의 수많은 툴들을 통해 vue보다 진보된 기능을 제공.
5. vue의 진입장벽이 훨씬 낮음.

그래서 누굴 쓰는게 좋음?
 - vue : 프로젝트 기간이 얼마 안될때, 소규모 프로젝트
 - react : 확장성이 매우 좋기때문에 숙련된 개발자들과 함께한다는 전제로 
           대규모 프로젝트에 사용.
 - 프로젝트에서 제일 중요한것은 안정성이 1순위, 재사용성 확장성이 2순위.

리엑트 역사.
 - 초기버전 : 클래스 기반의 컴포넌트로 구성.
   (이부분이 리엑트로의 접근을 많이 어렵게 느껴지게함)
   jsx가 도입, 클래스와 프로토타입에 대한 개념을 모르면 하기 너무 어려웠음
 - 15버전 SVG, HTML 지원, PureComponent -> document.createElement
 - 16버전 Fiber엔진 도입
   (우리가 아는 리엑트에 가장 가깝게 구현.)  
   포탈 개념, Hooks(useState, useEffect), 클래스 기반의 컴포넌특 아닌 함수형 페러다임이 추가.
 - 17버전 : 성능최적화에 중심을 맞춤
    (이벤트 처리 관련 패치가 많이 이루어짐)
 - 18버전 : UI 반응성과, 자동 배칭 시스템 추가

babel과 webpack
babel : JS 트랜스파일러
 - 최신 자바스크립트 문법을 지원받을 수 있도록 내용을 제공해주는 패키지
 (해당 브라우저가 최신 자바스크립트 문법을 지원하지 않아도 최신문법으로 작성된 코드들이 잘 돌아갈 수 있도록 변환)
webpack : 모듈 통합 패키지(배포를 위해 사용)

npx 설치 : npm install npx -g
리액트 시작 : npx create-react-app 프로젝트명

무조건 최신버전 설치 간단하게 하려면 npm create vite@latest

최신 버전에서 버전에 맞게 다운 그레이드가 필요
npm install --save react@^18.0.0 react-dom@18.0.0
npm install @testing-library/react@13.4.0

리액트에서 자주나오는 ES6 rosuaemf
 - 클래스, 화살표함수, 배열, 스프레드 문법(연산), 삼항연산자, 모듈

리액트의 기초
 - SPA를 사용하기 위해 쓰는 것이 react
리액트의 목표
 - 여러가지 방법으로 웹 페이지에서 HTML을 랜더링하는 것
 - 컴포넌트들을 만들고 제작하여 root에 뿌리는 형식

createRoot 함수 : React 구성요소가 표시될 HTML 요소를 정의하는 함수 
 -> 최종적으로 index.html 파일에 모든것을 랜더링
app.js -> index.js -> index.html 파일로 전달되는 구조

JSX : JavaScript XML의 약자
 -> 목적 : React에서 HTML 구현시 사용하는 문법
 -> JSX는 HTML 태그를 React 요소로 변환
 -> 리액트의 첫걸음은 JSX식 코딩에 익숙해져야한다
 -> 주의사항 : 꼭 JSX로 안해도되긴함, React에서는 JSX를 쓰면 더 쉽게 작성 가능